{
  "metainfo" : {
    "id" : "1",
    "language" : "scala",
    "fabricId" : "2730",
    "frontEndLanguage" : "sql",
    "mode" : "batch",
    "udfs" : {
      "language" : "scala",
      "udfs" : [ ]
    },
    "udafs" : {
      "language" : "scala",
      "code" : "package udfs\n\nimport org.apache.spark.sql.expressions._\nimport org.apache.spark.sql.types._\nimport org.apache.spark.sql._\n\n/**\n  * Here you can define your custom aggregate functions.\n  *\n  * Make sure to register your `udafs` in the register_udafs function below.\n  *\n  * Example:\n  *\n  * object GeometricMean extends UserDefinedAggregateFunction {\n  *   // This is the input fields for your aggregate function.\n  *   override def inputSchema: org.apache.spark.sql.types.StructType =\n  *     StructType(StructField(\"value\", DoubleType) :: Nil)\n  *\n  *   // This is the internal fields you keep for computing your aggregate.\n  *   override def bufferSchema: StructType = StructType(\n  *     StructField(\"count\", LongType) ::\n  *     StructField(\"product\", DoubleType) :: Nil\n  *   )\n  *\n  *   // This is the output type of your aggregatation function.\n  *   override def dataType: DataType = DoubleType\n  *\n  *   override def deterministic: Boolean = true\n  *\n  *   // This is the initial value for your buffer schema.\n  *   override def initialize(buffer: MutableAggregationBuffer): Unit = {\n  *     buffer(0) = 0L\n  *     buffer(1) = 1.0\n  *   }\n  *\n  *   // This is how to update your buffer schema given an input.\n  *   override def update(buffer: MutableAggregationBuffer, input: Row): Unit = {\n  *     buffer(0) = buffer.getAs[Long](0) + 1\n  *     buffer(1) = buffer.getAs[Double](1) * input.getAs[Double](0)\n  *   }\n  *\n  *   // This is how to merge two objects with the bufferSchema type.\n  *   override def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit = {\n  *     buffer1(0) = buffer1.getAs[Long](0) + buffer2.getAs[Long](0)\n  *     buffer1(1) = buffer1.getAs[Double](1) * buffer2.getAs[Double](1)\n  *   }\n  *\n  *   // This is where you output the final value, given the final value of your bufferSchema.\n  *   override def evaluate(buffer: Row): Any = {\n  *     math.pow(buffer.getDouble(1), 1.toDouble / buffer.getLong(0))\n  *   }\n  * }\n  *\n  */\n\n\nobject UDAFs {\n  /**\n    * Registers UDAFs with Spark SQL\n    */\n  def registerUDAFs(spark: SparkSession): Unit = {\n    /**\n      * Example:\n      *\n      * spark.udf.register(\"gm\", GeometricMean)\n      *\n      */\n\n\n  }\n}\n"
    },
    "configuration" : {
      "common" : {
        "type" : "record",
        "fields" : [ {
          "name" : "c_test",
          "kind" : {
            "type" : "string",
            "value" : "this is something new son"
          },
          "optional" : true
        }, {
          "name" : "c_array",
          "kind" : {
            "type" : "array",
            "elementType" : {
              "type" : "string",
              "value" : null
            },
            "value" : [ "dasdsad", "sadasdsad", "yes sir", "2yes sir" ]
          },
          "optional" : false
        }, {
          "name" : "c_record3",
          "kind" : {
            "type" : "record",
            "fields" : [ {
              "name" : "c_val3",
              "kind" : {
                "type" : "record",
                "fields" : [ {
                  "name" : "crr",
                  "kind" : {
                    "type" : "string",
                    "value" : "asdasdasd"
                  },
                  "optional" : false
                } ]
              },
              "optional" : false
            } ]
          },
          "optional" : false
        } ]
      },
      "oldCommon" : {
        "type" : "record",
        "fields" : [ ]
      },
      "fabrics" : { },
      "instances" : { },
      "selected" : "default",
      "nonEditable" : [ ],
      "isSubscribedPipelineWithPipelineConfigs" : false
    },
    "sparkConf" : [ {
      "name" : "spark_config1",
      "value" : "spark_config_value_1"
    }, {
      "name" : "spark_config2",
      "value" : "spark_config_value_2"
    } ],
    "hadoopConf" : [ {
      "name" : "hadoop_config1",
      "value" : "hadoop_config_value1"
    }, {
      "name" : "hadoop_config2",
      "value" : "hadoop_config_value2"
    } ],
    "codeMode" : "sparse",
    "buildSystem" : "maven",
    "externalDependencies" : [ {
      "coordinates" : "mysql:mysql-connector-java:8.0.29",
      "name" : "mysql",
      "exclusions" : [ ],
      "id" : "59965868",
      "type" : "coordinates",
      "enabled" : false
    }, {
      "coordinates" : "org.postgresql:postgresql:42.3.4",
      "name" : "postgres",
      "exclusions" : [ ],
      "id" : "1360721423",
      "type" : "coordinates",
      "enabled" : false
    }, {
      "repo" : "https://repo.maven.apache.org/maven2/",
      "coordinates" : "org.scalanlp:epic_2.12:0.5",
      "name" : "epic",
      "exclusions" : [ ],
      "id" : "418005485",
      "type" : "coordinates",
      "enabled" : false
    }, {
      "coordinates" : "org.typelevel:cats-core_2.12:2.6.1",
      "name" : "cats",
      "exclusions" : [ ],
      "id" : "1575366423",
      "type" : "coordinates",
      "enabled" : false
    }, {
      "coordinates" : "org.springframework:spring-beans:5.3.19",
      "name" : "spring",
      "exclusions" : [ ],
      "id" : "611418782",
      "type" : "coordinates",
      "enabled" : false
    }, {
      "coordinates" : "com.crealytics:spark-excel_2.12:3.2.1_0.17.1",
      "name" : "spark-excel",
      "exclusions" : [ ],
      "id" : "368609749",
      "type" : "coordinates",
      "enabled" : false
    }, {
      "repo" : "https://prophecyio.jfrog.io/artifactory/default-sbt-release/",
      "coordinates" : "io.prophecy:prophecy-libs_2.12:4.0.0-3.2.0",
      "name" : "prophecy-libs-4.0.0",
      "exclusions" : [ ],
      "id" : "GXM_V",
      "type" : "coordinates",
      "enabled" : false
    } ],
    "isImported" : false,
    "interimMode" : "Full",
    "interimModeEnabled" : true,
    "visualCodeInterimMode" : "Disabled",
    "recordsLimit" : {
      "enabled" : false,
      "value" : 1000
    },
    "topLevelPackage" : "com.scala.main.job1"
  },
  "connections" : [ {
    "id" : "g8JwtzA7GVCtF-U1TN36R",
    "source" : "o8K-lNobc6Z8Asi3dRegs$$Buw8lxPhFtSUcFZhGxXbx",
    "sourcePort" : "Yui765QKx0wOKHaOnjtzk$$Q04y-nxgyv0ZfORhocEUn",
    "target" : "bl47XMiEa-WNOlMEK4sFp$$2Dwp_ulOdXsBz8xjpntdm",
    "targetPort" : "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW"
  }, {
    "id" : "k3hzAcy7Y4X8jwKPPr44R",
    "source" : "o8K-lNobc6Z8Asi3dRegs$$Buw8lxPhFtSUcFZhGxXbx",
    "sourcePort" : "Yui765QKx0wOKHaOnjtzk$$Q04y-nxgyv0ZfORhocEUn",
    "target" : "qS7udi_fVyLwNFW-Mm0CD$$E1cMJlFkiBy9SppQZb6w0",
    "targetPort" : "2Gz2HS8MDf_HK-44Trsh5$$eiJ0Rvj3-tu3lppCP5uFr"
  }, {
    "id" : "YagxlrMVwen_jlbornjq9",
    "source" : "o8K-lNobc6Z8Asi3dRegs$$Buw8lxPhFtSUcFZhGxXbx",
    "sourcePort" : "Yui765QKx0wOKHaOnjtzk$$Q04y-nxgyv0ZfORhocEUn",
    "target" : "5IEpMUJQMpUIx6Hv3eZVS$$9f4baBrU_1q1LbFl9fY2n",
    "targetPort" : "qCaups1PStyAXXib1un7c$$i_76JB0Rt4nZ49W42v46U"
  } ],
  "processes" : {
    "bl47XMiEa-WNOlMEK4sFp$$2Dwp_ulOdXsBz8xjpntdm" : {
      "id" : "bl47XMiEa-WNOlMEK4sFp$$2Dwp_ulOdXsBz8xjpntdm",
      "component" : "Reformat",
      "metadata" : {
        "label" : "SCALA_BASIC1",
        "slug" : "SCALA_BASIC1",
        "x" : -645.2,
        "y" : 247.5999999999999,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW",
          "slug" : "in"
        } ],
        "outputs" : [ {
          "id" : "KHx3a7pEn7ZIJRnqGorWt$$RNdicUvC7gj0La9ZxSfE2",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "columnsSelector" : [ "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c   short  --", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c-int-column type", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##-- c-long", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c-decimal", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c  float", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c--boolean", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c- - -double", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c___-- string", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c  date", "vqaCSvN66ux6y98vYUpId$$OA1oJMPzK9Ui9RSaZo0yW##c_timestamp" ],
        "expressions" : [ {
          "target" : "c   short  --",
          "expression" : {
            "format" : "sql",
            "expression" : "`c   short  --`"
          },
          "description" : ""
        }, {
          "target" : "c-int-column type",
          "expression" : {
            "format" : "sql",
            "expression" : "`c-int-column type`"
          },
          "description" : ""
        }, {
          "target" : "-- c-long",
          "expression" : {
            "format" : "sql",
            "expression" : "`-- c-long`"
          },
          "description" : ""
        }, {
          "target" : "c-decimal",
          "expression" : {
            "format" : "sql",
            "expression" : "`c-decimal`"
          },
          "description" : ""
        }, {
          "target" : "c  float",
          "expression" : {
            "format" : "sql",
            "expression" : "`c  float`"
          },
          "description" : ""
        }, {
          "target" : "c--boolean",
          "expression" : {
            "format" : "sql",
            "expression" : "`c--boolean`"
          },
          "description" : ""
        }, {
          "target" : "c- - -double",
          "expression" : {
            "format" : "sql",
            "expression" : "`c- - -double`"
          },
          "description" : ""
        }, {
          "target" : "c___-- string",
          "expression" : {
            "format" : "sql",
            "expression" : "`c___-- string`"
          },
          "description" : ""
        }, {
          "target" : "c  date",
          "expression" : {
            "format" : "sql",
            "expression" : "`c  date`"
          },
          "description" : ""
        }, {
          "target" : "c_timestamp",
          "expression" : {
            "format" : "sql",
            "expression" : "c_timestamp"
          },
          "description" : ""
        } ]
      }
    },
    "o8K-lNobc6Z8Asi3dRegs$$Buw8lxPhFtSUcFZhGxXbx" : {
      "id" : "o8K-lNobc6Z8Asi3dRegs$$Buw8lxPhFtSUcFZhGxXbx",
      "component" : "Source",
      "metadata" : {
        "label" : "src_parquet_all_type_and_partition_withspacehyphens",
        "slug" : "src_parquet_all_type_and_partition_withspacehyphens",
        "x" : -1514.2000000000003,
        "y" : 285.9999999999999,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "Yui765QKx0wOKHaOnjtzk$$Q04y-nxgyv0ZfORhocEUn",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "datasetId" : "datasets/src_csv_special_char_column_name"
      }
    },
    "5IEpMUJQMpUIx6Hv3eZVS$$9f4baBrU_1q1LbFl9fY2n" : {
      "id" : "5IEpMUJQMpUIx6Hv3eZVS$$9f4baBrU_1q1LbFl9fY2n",
      "component" : "SchemaTransform",
      "metadata" : {
        "label" : "SchemaTransform_1",
        "slug" : "SchemaTransform_1",
        "x" : -786.4000000000001,
        "y" : 363.6,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "qCaups1PStyAXXib1un7c$$i_76JB0Rt4nZ49W42v46U",
          "slug" : "in"
        } ],
        "outputs" : [ {
          "id" : "vx64sYjC4vVrmBOSkCOXa$$qpmxU6WcJBG1bBJ5VrLY-",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false
      },
      "properties" : {
        "columnsSelector" : [ ],
        "transformations" : [ ]
      }
    },
    "qS7udi_fVyLwNFW-Mm0CD$$E1cMJlFkiBy9SppQZb6w0" : {
      "id" : "qS7udi_fVyLwNFW-Mm0CD$$E1cMJlFkiBy9SppQZb6w0",
      "component" : "Script",
      "metadata" : {
        "label" : "SCALA_BASIC12",
        "slug" : "SCALA_BASIC12",
        "x" : -521.1,
        "y" : 38.39999999999998,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false
      },
      "ports" : {
        "inputs" : [ {
          "id" : "2Gz2HS8MDf_HK-44Trsh5$$eiJ0Rvj3-tu3lppCP5uFr",
          "slug" : "in0"
        } ],
        "outputs" : [ {
          "id" : "1vob0WwUeTByi5ggao1MM$$RLb5byOWJfwhdby-ImTGc",
          "slug" : "out0",
          "schema" : {
            "type" : "struct",
            "fields" : [ ]
          }
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : true
      },
      "properties" : {
        "script" : "print(s\"Config: ${Config.c_test}\")\n\nvar out0=in0",
        "scriptMethodHeader" : "def apply(spark: SparkSession, in0: DataFrame): DataFrame = {",
        "scriptMethodFooter" : "    out0\n}"
      }
    }
  },
  "ports" : {
    "inputs" : [ ],
    "outputs" : [ ],
    "selectedInputFields" : [ ],
    "isCustomOutputSchema" : false
  }
}